DROP TABLE IF EXISTS AGENTS CASCADE;
DROP TABLE IF EXISTS ROLES CASCADE;
DROP TABLE IF EXISTS USERS  CASCADE;
DROP TABLE IF EXISTS USER_ROLES CASCADE;
DROP TABLE IF EXISTS PERMISSIONS CASCADE;

CREATE EXTENSION IF NOT EXISTs pgcrypto;

CREATE TABLE AGENTS (
  id_document INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  document_type TEXT NOT NULL,
  person_type TEXT NOT NULL,
  name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  phone VARCHAR(15) NOT NULL,
  email TEXT NOT NULL
);

CREATE TABLE ROLES (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT
);

CREATE TABLE USERS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  description TEXT,
  agent_id INT NOT NULL
);

CREATE TABLE USER_ROLES (
  role_id INT NOT NULL,
  user_id INT NOT NULL
);

CREATE TABLE PERMISSIONS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  access_module TEXT NOT NULL,
  role_id INT NOT NULL
);

ALTER TABLE USERS ADD CONSTRAINT fk_USERS_AGENT1 FOREIGN KEY (agent_id) REFERENCES AGENTS (id_document);

ALTER TABLE USER_ROLES ADD CONSTRAINT fk_USER_ROLES_ROLES1 FOREIGN KEY (role_id) REFERENCES ROLES (id);

ALTER TABLE USER_ROLES ADD CONSTRAINT fk_USER_ROLES_USERS1 FOREIGN KEY (user_id) REFERENCES USERS (id);

ALTER TABLE PERMISSIONS ADD CONSTRAINT fk_PERMISSIONS_ROLES1 FOREIGN KEY (role_id) REFERENCES ROLES (id);
